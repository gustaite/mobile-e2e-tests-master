import groovy.transform.Field
@Field
def testJobResults = [:]
@Field
def channel = 'automation-mobile-reports'
@Field
def skippedMessage = ""
@Field
def bigPictureJobUrl = ""

@Library('auto-shared-lib') _
pipeline {
    agent {
        node {
          label "master"
        }
    }

    environment {
        NEXUS_CLI_USER_PASSWORD = credentials('NEXUS_CLI_USER_PASSWORD')
        DEFAULT_USER_PASSWORD_PLAIN = credentials('DEFAULT_USER_PASSWORD_PLAIN')
        DEFAULT_USER_PASSWORD_ENCODED = credentials('DEFAULT_USER_PASSWORD_ENCODED')
        AFTERSHIP_API_KEY = credentials('AFTERSHIP_API_KEY')
    }

    options {
        enforceBuildSchedule()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(daysToKeepStr: '30', artifactDaysToKeepStr: '30'))
    }

    triggers {
        parameterizedCron("H 4 * * 1-5 %ANDROID_APP_VERSION=${env.ANDROID_LATEST_RELEASE_BRANCH}")
        cron('H 3 * * 1-5')
    }

  parameters {
      string(name: 'ANDROID_APP_VERSION', defaultValue: '', description: "In this field to run tests on PR enter PR-XXXX.\nTo run release version like 21.33.2 enter 21.33.2.\nTo run test on branch enter branch name. For example if branch name is: technical/some-fix enter: technical/some-fix")

      choice(name: 'TEST_SUITE', choices: ['regression', 'smoke', 'int_buyers', 'mario', 'find', 'nomads', 'shipping', 'autobahn', 'karma', 'debug', 'b2c', 'imageRecognition', 'reliability', 'cozy', 'a_team'], description: 'For PRs mostly smoke or test suite for a specific team should be selected')

      gitParameter(branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH', selectedValue:'DEFAULT', quickFilterEnabled: true)

      booleanParam(name: 'DELETE_ANDROID_FILES', defaultValue: true, description: 'This one is dedicated for 3310 and spider-pig team')

      extendedChoice(
                defaultValue: 'CZ,INT,PL,US,UK,LT,DE,SB_INT,SB_DE,SB_UK,SB_US,SB_PL,SB_LT,SB_CZ',
                description: 'For PRs only INT,PL, SB_INT should be selected.',
                multiSelectDelimiter: ',',
                name: 'PORTAL',
                quoteValue: false,
                saveJSONParameterToFile: false,
                type: 'PT_MULTI_SELECT',
                value:'CZ,INT,PL,US,UK,LT,DE,SB_INT,SB_DE,SB_UK,SB_US,SB_PL,SB_LT,SB_CZ',
                visibleItemCount: 14)

      booleanParam(name: 'RUN_ALL_ON_SANDBOX', defaultValue: false, description: 'Allows all tests to be run on sandbox')

      string(name: 'DEVICE_NAME', defaultValue: '', description: 'Devices names separated by commas to run tests on')
  }

  stages {
      stage('Info') {
          steps {
              script {
                  currentBuild.displayName = "${env.JOB_NAME}: ${params.BRANCH}"
                  params.each { param ->
                      currentBuild.description = "${param.key}: ${param.value} \n ${currentBuild.description}"
                  }

                  def regex = /(\d+.?)+/
                  if (params.ANDROID_APP_VERSION ==~ regex) {
                      slack.message("qa-core-and-auto", "Tests for :android: ${params.ANDROID_APP_VERSION} have started")
                  }
              }
          }
      }

      stage("Run Android tests") {
  		steps {
  			script {
  				for(portal in params.PORTAL.split(',')) {

                    def isVersionOK = android.resolvePartialPathByVersion(params.ANDROID_APP_VERSION)
                    if(isVersionOK.contains("NOT_IMPLEMENTED")) {
                        skippedMessage = "\n Android version number is incorrect: `${params.ANDROID_APP_VERSION}`. If it is a PR it should start with `PR-`. Tests were not run on these portals: ${params.PORTAL} "
                        return
                    }

                    def nexusUrl = nexus.getApkUrl(portal, params.ANDROID_APP_VERSION)
                    def responseStatus = nexus.getRequestStatus(nexusUrl)
                    if (responseStatus == "404") {
                        skippedMessage += "\n${portal} was skipped. Cannot find apk in nexus: ${nexusUrl}"
                        continue
                    }

    				stage("Run Android tests in ${portal}") {
              				buildtmp = build job: 'android-e2e-tests-on-portal', parameters: [
							string(name: 'PORTAL', value: portal),
							booleanParam(name: 'DELETE_ANDROID_FILES', value: params.DELETE_ANDROID_FILES),
							string(name: 'ANDROID_APP_VERSION', value: params.ANDROID_APP_VERSION),
							string(name: 'TEST_SUITE', value: params.TEST_SUITE),
                            string(name: 'BRANCH', value: params.BRANCH),
                            booleanParam(name: 'RUN_ALL_ON_SANDBOX', value: params.RUN_ALL_ON_SANDBOX),
                            string(name: 'DEVICE_NAME', value: params.DEVICE_NAME)
						], wait: true, propagate: false

					echo "build tmp: ${buildtmp.getAbsoluteUrl()}"

                    def result = buildtmp.getResult()
                    testJobResults["${portal}"] = [result: "${result}", absoluteUrl: "${buildtmp.getAbsoluteUrl()}", buildNumber: "${buildtmp.getNumber()}"]
      				}
    			}
  			}
  		}
  	}
    stage("Generate Report") {
      steps {
          script {
              jobReport = build job: 'Big_Picture_Report', parameters: [
                string(name: 'ANDROID_NUMBER', value: env.BUILD_NUMBER)
              ], wait: true, propagate: false

              echo "build report: ${jobReport.getAbsoluteUrl()}"
              bigPictureJobUrl = jobReport.getAbsoluteUrl()
          }
      }
    }
  }

  post {
    always {
    	sh "env"
		script {
            report.generate_allure_report_collection(testJobResults, env.WORKSPACE, bigPictureJobUrl)
		}
    }
    failure {
        script {
            message("danger")
        }
    }
    success {
        script {
            message("good")
        }
    }
    aborted {
        script {
            message("warning")
        }
    }
  }
}

def message(String color) {
    slack.send_results_message(channel, color, ":android: ${params.ANDROID_APP_VERSION}", "${params.TEST_SUITE} collection", testJobResults, skippedMessage)
}
