import org.jenkinsci.plugins.pipeline.modeldefinition.Utils
def testJobResults = [:]
def channel = 'spider-pig-android-pr-test'
def apk_portal = [:]
def steve = "Steve 18"
def portals = []
def skippedPortals = ""
@Library('auto-shared-lib') _

pipeline {
    agent {
        node {
            label "android-pr"
        }
    }

    environment {
        NEW_JENKINS = 'true'
        ANDROID_HOME = '/usr/local/share/android-sdk'
        NEXUS_CLI_USER_PASSWORD = credentials('NEXUS_CLI_USER_PASSWORD')
        DEFAULT_USER_PASSWORD_PLAIN = credentials('DEFAULT_USER_PASSWORD_PLAIN')
        DEFAULT_USER_PASSWORD_ENCODED = credentials('DEFAULT_USER_PASSWORD_ENCODED')
        AFTERSHIP_API_KEY = credentials('AFTERSHIP_API_KEY')
        AUTOBOT_CREDS = credentials('autobot-creds')
        VINTED_IOS = credentials('PersonalAccessToken')
    }

    options {
        enforceBuildSchedule()
        disableConcurrentBuilds()
        buildDiscarder(logRotator(daysToKeepStr: '20', artifactDaysToKeepStr: '20'))
    }

    parameters {
        string(name: 'ANDROID_APP_VERSION', defaultValue: '', description: '')
        string(name: 'COMMIT_HASH', defaultValue: '', description: '')
        choice(name: 'TEST_SUITE', choices: ['smoke_pr_test', 'regression', 'smoke', 'int_buyers', 'mario', 'find', 'nomads', 'shipping', 'autobahn', 'karma', 'debug', 'b2c', 'imageRecognition'], description: '')
        gitParameter(branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH', selectedValue:'DEFAULT')
        booleanParam(name: 'DELETE_ANDROID_FILES', defaultValue: true, description: '')
        extendedChoice(
                defaultValue: 'INT',
                description: '',
                multiSelectDelimiter: ',',
                name: 'PORTAL',
                quoteValue: false,
                saveJSONParameterToFile: false,
                type: 'PT_MULTI_SELECT',
                value:'CZ,INT,PL,US,UK,LT,DE,SB_INT,SB_DE,SB_UK,SB_US,SB_PL,SB_LT,SB_CZ',
                visibleItemCount: 14)

        booleanParam(name: 'RUN_ALL_ON_SANDBOX', defaultValue: false, description: 'Allows all tests to be run on sandbox')
    }

    stages {
        stage('Info') {
            steps {
                script {
                    currentBuild.displayName = "${env.JOB_NAME}: ${params.BRANCH}"
                    params.each { param ->
                        currentBuild.description = "${param.key}: ${param.value} \n ${currentBuild.description}"
                    }
                    portals = params.PORTAL.split(',')
                }
            }
        }

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git(branch: "${params.BRANCH}", credentialsId: 'vinted-ios', url: 'git@github.com:vinted/mobile-e2e-tests.git')
            }
        }

        stage('Prepare environment for tests run') {
            parallel {
                stage('Restart Android Appium nodes') {
                    steps {
                        sh """
                            chmod +x "/Users/steve/Resilio Sync/automation-team/seleniumGrid/grid/android_pr.sh"
                            open -a Terminal "/Users/steve/Resilio Sync/automation-team/seleniumGrid/grid/android_pr.sh"
                        """
                    }
                }

                stage('Download apks') {
                    steps {
                        script {
                            download.download_apks_for_steve(steve, portals, params.ANDROID_APP_VERSION)
                        }
                    }
                }
            }
        }

        stage('Check if apk was downloaded') {
            steps {
                script {
                    for (portal in portals) {
                        stage("Check APK exits for ${portal}")
                        result = android.does_apk_exist(steve, portal, params.ANDROID_APP_VERSION)
                        echo "IS apk: $result"
                        apk_portal[portal] = result
                        if (result == "false") {
                            skippedPortals += ":grey_question:$portal "
                        }
                    }
                }
            }
        }

        stage("Run Android tests") {
            steps {
                script {
                    for (portal in portals) {
                        stage("Run Android tests in ${portal}") {
                            if (apk_portal[portal] == "false") {
                                Utils.markStageSkippedForConditional("Run Android tests in ${portal}")
                            } else {
                                script {
                                    try {
                                        sh "./gradlew --no-daemon clean test -Dtest.platform=Android -Dtest.portal=${portal} -Dtest.run_all_on_sandbox=${params.RUN_ALL_ON_SANDBOX} -Dselenium_grid_url=http://localhost:4723 -Psuite=${params.TEST_SUITE} --console=plain"
                                    } catch (err) {
                                    }
                                    sh "env"
                                    archiveArtifacts(artifacts: '**/testng-results.xml, **/tests/test/classes/*.html', caseSensitive: true)
                                    allure([
                                            includeProperties: false,
                                            jdk              : '',
                                            properties       : [],
                                            reportBuildPolicy: 'ALWAYS',
                                            results          : [[path: 'app/build/allure-results']]
                                    ])
                                    publishHTML(
                                            target: [
                                                    allowMissing         : false,
                                                    alwaysLinkToLastBuild: false,
                                                    keepAll              : false,
                                                    reportDir            : 'app/build/allure-results',
                                                    reportFiles          : 'index.html',
                                                    reportName           : "Allure Report"
                                            ]
                                    )
                                }
                            }
                        }
                    }
                }
            }
        }
    }

    post {
        always {
            sh "env"
            script {
                report.generate_allure_report_collection(testJobResults, env.WORKSPACE)
                def consoleText = getJobConsoleText()
                def (allResult, status, testCount) = getTestResult(consoleText)
                def failedTests = getFailedTestNames(consoleText)
                def githubState = getStatusForGithub(status)
                if (githubState != "success") {
                    slack.message(channel, ":android: ${params.ANDROID_APP_VERSION} ${params.PORTAL} $allResult$failedTests")
                }
                sh """
                    curl -i "https://api.github.com/repos/vinted/android/statuses/${params.COMMIT_HASH}" -H "Accept: application/vnd.github.v3+json" -u vinted-ios:${env.VINTED_IOS} -X POST -d '{"state":"$githubState","description":"E2E tests: $allResult$failedTests","target_url":"${getReportUrl(status)}" , "context": "vinted-ios"}'
                """
            }
        }
    }
}

def getReportUrl(status) {
    def url = "${env.BUILD_URL}"
    if(status == null)
        return "${url}console"
    return "${url}allure"
}

def getTestResult(consoleText) {
    def result = consoleText =~ /([A-Z]+): Executed (\d+ tests).*/
    if(result.findAll().size() > 0)
        return result.findAll()[0]
    else
        return ["Missing results"]
}

def getFailedTestNames(consoleText) {
    def tests = ""
    def result = consoleText =~ /Test (.*) FAILED/
    def list = result.findAll()
    for(test in list) {
        tests += "\n${test[0]}"
    }
    return tests
}

def getStatusForGithub(status) {
    if(status == null)
        return "error"
    if(status == "SUCCESS")
        return "success"
    return "failure"
}

def getJobConsoleText() {
    def url = "${env.BUILD_URL}consoleText"
    URLConnection connection = new URL(url).openConnection()
    String encoded = Base64.getEncoder().encodeToString((env.AUTOBOT_CREDS).getBytes("UTF-8"))
    connection.setRequestProperty("Accept-Charset", "UTF-8")
    connection.setRequestProperty("Authorization", "Basic " + encoded)
    return connection.getInputStream().text
}
