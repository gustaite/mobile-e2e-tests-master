@Library('auto-shared-lib') _
pipeline {
    agent {
        node {
            label "master"
        }
    }

    environment {
        NEW_JENKINS = 'true'
        CREDIT_CARD_DETAILS = credentials('CREDIT_CARD_DETAILS_ID')
        NEXUS_CLI_USER_PASSWORD = credentials('NEXUS_CLI_USER_PASSWORD')
        DEFAULT_USER_PASSWORD_PLAIN = credentials('DEFAULT_USER_PASSWORD_PLAIN')
        DEFAULT_USER_PASSWORD_ENCODED = credentials('DEFAULT_USER_PASSWORD_ENCODED')
        AFTERSHIP_API_KEY = credentials('AFTERSHIP_API_KEY')
    }

    triggers {
        cron('0 12 3 7 *')
        parameterizedCron('0 15 3 7 *')
    }

    options {
        disableConcurrentBuilds()
        timeout(time: 35, unit: 'MINUTES')
        buildDiscarder(logRotator(daysToKeepStr: '30', artifactDaysToKeepStr: '30'))
        ansiColor('xterm')
    }

    parameters {
        string(name: 'ANDROID_APP_VERSION', defaultValue: '', description: '')

        choice(name: 'PORTAL', choices: ['CZ', 'INT', 'PL', 'US', 'UK', 'LT', 'DE', 'NL', 'ES', 'LU', 'BE', 'PT', 'IT', 'AT', 'SB_INT', 'SB_DE', 'SB_UK', 'SB_US', 'SB_PL', 'SB_LT', 'SB_CZ', 'SB_NL', 'SB_ES', 'SB_LU', 'SB_BE', 'SB_PT', 'SB_IT', 'SB_AT'], description: '')

        choice(name: 'TEST_SUITE', choices: ['regression', 'smoke', 'int_buyers', 'mario', 'find', 'nomads', 'shipping', 'autobahn', 'karma', 'debug', 'b2c', 'imageRecognition', 'reliability', 'cozy', 'a_team'], description: '')

        gitParameter(branchFilter: 'origin/(.*)', defaultValue: 'master', name: 'BRANCH', type: 'PT_BRANCH', selectedValue: 'DEFAULT', quickFilterEnabled: true)

        booleanParam(name: 'DELETE_ANDROID_FILES', defaultValue: true, description: '')

        booleanParam(name: 'RUN_ALL_ON_SANDBOX', defaultValue: false, description: 'Allows all tests to be run on sandbox')

        string(name: 'DEVICE_NAME', defaultValue: '', description: 'Devices names separated by commas to run tests on')
    }

    stages {

        stage('Check is Hub available') {
            steps {
                script {
                    hub.checkIfHubAvailable()
                }
            }
        }

        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps {
                git(branch: "${params.BRANCH}", credentialsId: 'vinted-ios', url: 'git@github.com:vinted/mobile-e2e-tests.git')
            }
        }

        stage('Send message to slack') {
            steps {
                script {
                    slack.message("sg-device-status", "Tests for :android: ${params.PORTAL} ${params.ANDROID_APP_VERSION} have started")
                }
            }
        }

        stage('Prepare environment for tests run') {
            parallel {
                stage('Restart Android Appium nodes') {
                    steps {
                        build job: 'SG-Node-Restart', parameters: [string(name: 'PLATFORM', value: 'Android')], propagate: false
                    }
                }

                stage('Download apks') {
                    steps {
                        build job: 'Infra/Android-apk-download', parameters: [string(name: 'PORTAL', value: "${params.PORTAL}"), string(name: 'ANDROID_APP_VERSION', value: "${params.ANDROID_APP_VERSION}")], propagate: false
                    }
                }
            }
        }
        stage('Run tests') {
            parallel {
                stage('Start Device report') {
                    steps {
                        build job: 'Infra/Devices', propagate: false, wait: true
                    }
                }

                stage('Run Android tests') {
                    steps {
                        sh "./gradlew --no-daemon clean test -Dtest.platform=Android -Dtest.portal=${params.PORTAL} -Dtest.delete_android_files=${params.DELETE_ANDROID_FILES} -Dtest.run_all_on_sandbox=${params.RUN_ALL_ON_SANDBOX} -Dtest.device_name=\"${params.DEVICE_NAME}\" -Psuite=${params.TEST_SUITE}"
                    }
                }
            }
        }
    }

    post {
        always {

            sh "env"

            script {
                allure([
                        includeProperties: false,
                        jdk              : '',
                        properties       : [],
                        reportBuildPolicy: 'ALWAYS',
                        results          : [[path: 'app/build/allure-results']]
                ])
                slack.message("sg-device-status", "Tests for :android: ${params.PORTAL} ${params.ANDROID_APP_VERSION} finished")
            }

            sh 'zip -r test-cases ./allure-report/data/test-cases*'
            archiveArtifacts(artifacts: '**/testng-results.xml, **/tests/test/classes/*.html, **/test-cases.zip', caseSensitive: true)

            publishHTML(
                    target: [
                            allowMissing         : false,
                            alwaysLinkToLastBuild: false,
                            keepAll              : false,
                            reportDir            : 'app/build/allure-results',
                            reportFiles          : 'index.html',
                            reportName           : "Allure Report"
                    ]
            )
        }
    }
}
